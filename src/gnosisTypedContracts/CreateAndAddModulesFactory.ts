/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from ".";
import { CreateAndAddModules } from "./CreateAndAddModules";

export class CreateAndAddModulesFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: TransactionOverrides): Promise<CreateAndAddModules> {
    return super.deploy(overrides) as Promise<CreateAndAddModules>;
  }
  getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
    return super.getDeployTransaction(overrides);
  }
  attach(address: string): CreateAndAddModules {
    return super.attach(address) as CreateAndAddModules;
  }
  connect(signer: Signer): CreateAndAddModulesFactory {
    return super.connect(signer) as CreateAndAddModulesFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CreateAndAddModules {
    return new Contract(address, _abi, signerOrProvider) as CreateAndAddModules;
  }
}

const _abi = [
  {
    constant: false,
    inputs: [
      {
        name: "proxyFactory",
        type: "address"
      },
      {
        name: "data",
        type: "bytes"
      }
    ],
    name: "createAndAddModules",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "module",
        type: "address"
      }
    ],
    name: "enableModule",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610262806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806360df7f581461003b578063610b592514610100575b600080fd5b6100fe6004803603604081101561005157600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561008957600080fd5b82018360208201111561009b57600080fd5b803590602001918460018302840111640100000000831117156100bd57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610133945050505050565b005b6100fe6004803603602081101561011657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610036565b80516000805b8281101561022f5780840160200151818501604001604051600060208285858c5af4141561016657600080fd5b73ffffffffffffffffffffffffffffffffffffffff8151169450602080601f85010402602001840193505050503073ffffffffffffffffffffffffffffffffffffffff1663610b5925836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561021257600080fd5b505af1158015610226573d6000803e3d6000fd5b50505050610139565b505050505056fea165627a7a7230582078a4233a7d3e2d9bc12a7d68d9ffe13073af629ce34868a05a76c02b1cd33be90029";
