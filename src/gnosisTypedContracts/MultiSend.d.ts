/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MultiSendInterface extends Interface {
  functions: {
    multiSend: TypedFunctionDescription<{
      encode([transactions]: [Arrayish]): string;
    }>;
  };

  events: {};
}

export class MultiSend extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MultiSend;
  attach(addressOrName: string): MultiSend;
  deployed(): Promise<MultiSend>;

  on(event: EventFilter | string, listener: Listener): MultiSend;
  once(event: EventFilter | string, listener: Listener): MultiSend;
  addListener(eventName: EventFilter | string, listener: Listener): MultiSend;
  removeAllListeners(eventName: EventFilter | string): MultiSend;
  removeListener(eventName: any, listener: Listener): MultiSend;

  interface: MultiSendInterface;

  functions: {
    multiSend(
      transactions: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  multiSend(
    transactions: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    multiSend(transactions: Arrayish): Promise<BigNumber>;
  };
}
