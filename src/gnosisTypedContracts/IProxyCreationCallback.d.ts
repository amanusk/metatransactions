/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IProxyCreationCallbackInterface extends Interface {
  functions: {
    proxyCreated: TypedFunctionDescription<{
      encode([proxy, _mastercopy, initializer, saltNonce]: [
        string,
        string,
        Arrayish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class IProxyCreationCallback extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IProxyCreationCallback;
  attach(addressOrName: string): IProxyCreationCallback;
  deployed(): Promise<IProxyCreationCallback>;

  on(event: EventFilter | string, listener: Listener): IProxyCreationCallback;
  once(event: EventFilter | string, listener: Listener): IProxyCreationCallback;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IProxyCreationCallback;
  removeAllListeners(eventName: EventFilter | string): IProxyCreationCallback;
  removeListener(eventName: any, listener: Listener): IProxyCreationCallback;

  interface: IProxyCreationCallbackInterface;

  functions: {
    proxyCreated(
      proxy: string,
      _mastercopy: string,
      initializer: Arrayish,
      saltNonce: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  proxyCreated(
    proxy: string,
    _mastercopy: string,
    initializer: Arrayish,
    saltNonce: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    proxyCreated(
      proxy: string,
      _mastercopy: string,
      initializer: Arrayish,
      saltNonce: BigNumberish
    ): Promise<BigNumber>;
  };
}
