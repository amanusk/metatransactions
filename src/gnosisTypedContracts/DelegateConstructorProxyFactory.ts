/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { Arrayish } from "ethers/utils";

import { TransactionOverrides } from ".";
import { DelegateConstructorProxy } from "./DelegateConstructorProxy";

export class DelegateConstructorProxyFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _masterCopy: string,
    initializer: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<DelegateConstructorProxy> {
    return super.deploy(_masterCopy, initializer, overrides) as Promise<
      DelegateConstructorProxy
    >;
  }
  getDeployTransaction(
    _masterCopy: string,
    initializer: Arrayish,
    overrides?: TransactionOverrides
  ): UnsignedTransaction {
    return super.getDeployTransaction(_masterCopy, initializer, overrides);
  }
  attach(address: string): DelegateConstructorProxy {
    return super.attach(address) as DelegateConstructorProxy;
  }
  connect(signer: Signer): DelegateConstructorProxyFactory {
    return super.connect(signer) as DelegateConstructorProxyFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DelegateConstructorProxy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DelegateConstructorProxy;
  }
}

const _abi = [
  {
    inputs: [
      {
        name: "_masterCopy",
        type: "address"
      },
      {
        name: "initializer",
        type: "bytes"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    payable: true,
    stateMutability: "payable",
    type: "fallback"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102193803806102198339810180604052604081101561003357600080fd5b81516020830180519193928301929164010000000081111561005457600080fd5b8201602081018481111561006757600080fd5b815164010000000081118282018710171561008157600080fd5b509093508492505050600160a060020a03811615156100eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806101f56024913960400191505060405180910390fd5b60008054600160a060020a031916600160a060020a03929092169190911781558151111561014657600160a060020a0360005416600080835160208501846127105a03f46040513d6000823e811515610142573d81fd5b5050505b5050609f806101566000396000f3fe608060405273ffffffffffffffffffffffffffffffffffffffff600054167fa619486e0000000000000000000000000000000000000000000000000000000060003514156050578060005260206000f35b3660008037600080366000845af43d6000803e801515606e573d6000fd5b3d6000f3fea165627a7a72305820682c51cf08819aac480c7fbe6096ef679e33e4c4c2ffe2fe4f6b213a11a5d5fe0029496e76616c6964206d617374657220636f707920616464726573732070726f7669646564";
