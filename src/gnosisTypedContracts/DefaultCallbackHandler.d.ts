/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface DefaultCallbackHandlerInterface extends Interface {
  functions: {
    tokensReceived: TypedFunctionDescription<{
      encode([, , , , ,]: [
        string,
        string,
        string,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    onERC721Received: TypedFunctionDescription<{
      encode([, , ,]: [string, string, BigNumberish, Arrayish]): string;
    }>;

    NAME: TypedFunctionDescription<{ encode([]: []): string }>;

    onERC1155BatchReceived: TypedFunctionDescription<{
      encode([, , , ,]: [
        string,
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    onERC1155Received: TypedFunctionDescription<{
      encode([, , , ,]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    VERSION: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class DefaultCallbackHandler extends Contract {
  connect(signerOrProvider: Signer | Provider | string): DefaultCallbackHandler;
  attach(addressOrName: string): DefaultCallbackHandler;
  deployed(): Promise<DefaultCallbackHandler>;

  on(event: EventFilter | string, listener: Listener): DefaultCallbackHandler;
  once(event: EventFilter | string, listener: Listener): DefaultCallbackHandler;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): DefaultCallbackHandler;
  removeAllListeners(eventName: EventFilter | string): DefaultCallbackHandler;
  removeListener(eventName: any, listener: Listener): DefaultCallbackHandler;

  interface: DefaultCallbackHandlerInterface;

  functions: {
    tokensReceived(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: Arrayish,
      arg5: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    NAME(): Promise<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    VERSION(): Promise<string>;
  };

  tokensReceived(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    arg4: Arrayish,
    arg5: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  NAME(): Promise<string>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  VERSION(): Promise<string>;

  filters: {};

  estimate: {
    tokensReceived(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: Arrayish,
      arg5: Arrayish
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: Arrayish
    ): Promise<BigNumber>;

    NAME(): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: Arrayish
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: Arrayish
    ): Promise<BigNumber>;

    VERSION(): Promise<BigNumber>;
  };
}
