/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface WhitelistModuleInterface extends Interface {
  functions: {
    executeWhitelisted: TypedFunctionDescription<{
      encode([to, value, data]: [string, BigNumberish, Arrayish]): string;
    }>;

    isWhitelisted: TypedFunctionDescription<{ encode([]: [string]): string }>;

    manager: TypedFunctionDescription<{ encode([]: []): string }>;

    changeMasterCopy: TypedFunctionDescription<{
      encode([_masterCopy]: [string]): string;
    }>;

    removeFromWhitelist: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    NAME: TypedFunctionDescription<{ encode([]: []): string }>;

    setup: TypedFunctionDescription<{ encode([accounts]: [string[]]): string }>;

    addToWhitelist: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    VERSION: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    ChangedMasterCopy: TypedEventDescription<{
      encodeTopics([masterCopy]: [null]): string[];
    }>;
  };
}

export class WhitelistModule extends Contract {
  connect(signerOrProvider: Signer | Provider | string): WhitelistModule;
  attach(addressOrName: string): WhitelistModule;
  deployed(): Promise<WhitelistModule>;

  on(event: EventFilter | string, listener: Listener): WhitelistModule;
  once(event: EventFilter | string, listener: Listener): WhitelistModule;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): WhitelistModule;
  removeAllListeners(eventName: EventFilter | string): WhitelistModule;
  removeListener(eventName: any, listener: Listener): WhitelistModule;

  interface: WhitelistModuleInterface;

  functions: {
    executeWhitelisted(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isWhitelisted(arg0: string): Promise<boolean>;

    manager(): Promise<string>;

    changeMasterCopy(
      _masterCopy: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeFromWhitelist(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    NAME(): Promise<string>;

    setup(
      accounts: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addToWhitelist(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    VERSION(): Promise<string>;
  };

  executeWhitelisted(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isWhitelisted(arg0: string): Promise<boolean>;

  manager(): Promise<string>;

  changeMasterCopy(
    _masterCopy: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeFromWhitelist(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  NAME(): Promise<string>;

  setup(
    accounts: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addToWhitelist(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  VERSION(): Promise<string>;

  filters: {
    ChangedMasterCopy(masterCopy: null): EventFilter;
  };

  estimate: {
    executeWhitelisted(
      to: string,
      value: BigNumberish,
      data: Arrayish
    ): Promise<BigNumber>;

    isWhitelisted(arg0: string): Promise<BigNumber>;

    manager(): Promise<BigNumber>;

    changeMasterCopy(_masterCopy: string): Promise<BigNumber>;

    removeFromWhitelist(account: string): Promise<BigNumber>;

    NAME(): Promise<BigNumber>;

    setup(accounts: string[]): Promise<BigNumber>;

    addToWhitelist(account: string): Promise<BigNumber>;

    VERSION(): Promise<BigNumber>;
  };
}
