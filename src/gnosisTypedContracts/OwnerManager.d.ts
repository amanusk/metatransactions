/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface OwnerManagerInterface extends Interface {
  functions: {
    addOwnerWithThreshold: TypedFunctionDescription<{
      encode([owner, _threshold]: [string, BigNumberish]): string;
    }>;

    isOwner: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    changeThreshold: TypedFunctionDescription<{
      encode([_threshold]: [BigNumberish]): string;
    }>;

    getOwners: TypedFunctionDescription<{ encode([]: []): string }>;

    swapOwner: TypedFunctionDescription<{
      encode([prevOwner, oldOwner, newOwner]: [string, string, string]): string;
    }>;

    getThreshold: TypedFunctionDescription<{ encode([]: []): string }>;

    removeOwner: TypedFunctionDescription<{
      encode([prevOwner, owner, _threshold]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    AddedOwner: TypedEventDescription<{
      encodeTopics([owner]: [null]): string[];
    }>;

    RemovedOwner: TypedEventDescription<{
      encodeTopics([owner]: [null]): string[];
    }>;

    ChangedThreshold: TypedEventDescription<{
      encodeTopics([threshold]: [null]): string[];
    }>;
  };
}

export class OwnerManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): OwnerManager;
  attach(addressOrName: string): OwnerManager;
  deployed(): Promise<OwnerManager>;

  on(event: EventFilter | string, listener: Listener): OwnerManager;
  once(event: EventFilter | string, listener: Listener): OwnerManager;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): OwnerManager;
  removeAllListeners(eventName: EventFilter | string): OwnerManager;
  removeListener(eventName: any, listener: Listener): OwnerManager;

  interface: OwnerManagerInterface;

  functions: {
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isOwner(owner: string): Promise<boolean>;

    changeThreshold(
      _threshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getOwners(): Promise<string[]>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getThreshold(): Promise<BigNumber>;

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  addOwnerWithThreshold(
    owner: string,
    _threshold: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isOwner(owner: string): Promise<boolean>;

  changeThreshold(
    _threshold: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getOwners(): Promise<string[]>;

  swapOwner(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getThreshold(): Promise<BigNumber>;

  removeOwner(
    prevOwner: string,
    owner: string,
    _threshold: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AddedOwner(owner: null): EventFilter;

    RemovedOwner(owner: null): EventFilter;

    ChangedThreshold(threshold: null): EventFilter;
  };

  estimate: {
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish
    ): Promise<BigNumber>;

    isOwner(owner: string): Promise<BigNumber>;

    changeThreshold(_threshold: BigNumberish): Promise<BigNumber>;

    getOwners(): Promise<BigNumber>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string
    ): Promise<BigNumber>;

    getThreshold(): Promise<BigNumber>;

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish
    ): Promise<BigNumber>;
  };
}
