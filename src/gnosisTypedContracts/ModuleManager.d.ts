/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ModuleManagerInterface extends Interface {
  functions: {
    execTransactionFromModule: TypedFunctionDescription<{
      encode([to, value, data, operation]: [
        string,
        BigNumberish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    execTransactionFromModuleReturnData: TypedFunctionDescription<{
      encode([to, value, data, operation]: [
        string,
        BigNumberish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    enableModule: TypedFunctionDescription<{
      encode([module]: [string]): string;
    }>;

    getModules: TypedFunctionDescription<{ encode([]: []): string }>;

    getModulesPaginated: TypedFunctionDescription<{
      encode([start, pageSize]: [string, BigNumberish]): string;
    }>;

    disableModule: TypedFunctionDescription<{
      encode([prevModule, module]: [string, string]): string;
    }>;
  };

  events: {
    EnabledModule: TypedEventDescription<{
      encodeTopics([module]: [null]): string[];
    }>;

    DisabledModule: TypedEventDescription<{
      encodeTopics([module]: [null]): string[];
    }>;

    ExecutionFromModuleSuccess: TypedEventDescription<{
      encodeTopics([module]: [string | null]): string[];
    }>;

    ExecutionFromModuleFailure: TypedEventDescription<{
      encodeTopics([module]: [string | null]): string[];
    }>;
  };
}

export class ModuleManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ModuleManager;
  attach(addressOrName: string): ModuleManager;
  deployed(): Promise<ModuleManager>;

  on(event: EventFilter | string, listener: Listener): ModuleManager;
  once(event: EventFilter | string, listener: Listener): ModuleManager;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ModuleManager;
  removeAllListeners(eventName: EventFilter | string): ModuleManager;
  removeListener(eventName: any, listener: Listener): ModuleManager;

  interface: ModuleManagerInterface;

  functions: {
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    enableModule(
      module: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getModules(): Promise<string[]>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish
    ): Promise<{
      array: string[];
      next: string;
      0: string[];
      1: string;
    }>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  execTransactionFromModule(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    operation: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  execTransactionFromModuleReturnData(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    operation: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  enableModule(
    module: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getModules(): Promise<string[]>;

  getModulesPaginated(
    start: string,
    pageSize: BigNumberish
  ): Promise<{
    array: string[];
    next: string;
    0: string[];
    1: string;
  }>;

  disableModule(
    prevModule: string,
    module: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    EnabledModule(module: null): EventFilter;

    DisabledModule(module: null): EventFilter;

    ExecutionFromModuleSuccess(module: string | null): EventFilter;

    ExecutionFromModuleFailure(module: string | null): EventFilter;
  };

  estimate: {
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish
    ): Promise<BigNumber>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish
    ): Promise<BigNumber>;

    enableModule(module: string): Promise<BigNumber>;

    getModules(): Promise<BigNumber>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish
    ): Promise<BigNumber>;

    disableModule(prevModule: string, module: string): Promise<BigNumber>;
  };
}
