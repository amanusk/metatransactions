/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface StateChannelModuleInterface extends Interface {
  functions: {
    getTransactionHash: TypedFunctionDescription<{
      encode([to, value, data, operation, nonce]: [
        string,
        BigNumberish,
        Arrayish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    manager: TypedFunctionDescription<{ encode([]: []): string }>;

    changeMasterCopy: TypedFunctionDescription<{
      encode([_masterCopy]: [string]): string;
    }>;

    NAME: TypedFunctionDescription<{ encode([]: []): string }>;

    setup: TypedFunctionDescription<{ encode([]: []): string }>;

    isExecuted: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    execTransaction: TypedFunctionDescription<{
      encode([to, value, data, operation, nonce, signatures]: [
        string,
        BigNumberish,
        Arrayish,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    VERSION: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    ChangedMasterCopy: TypedEventDescription<{
      encodeTopics([masterCopy]: [null]): string[];
    }>;
  };
}

export class StateChannelModule extends Contract {
  connect(signerOrProvider: Signer | Provider | string): StateChannelModule;
  attach(addressOrName: string): StateChannelModule;
  deployed(): Promise<StateChannelModule>;

  on(event: EventFilter | string, listener: Listener): StateChannelModule;
  once(event: EventFilter | string, listener: Listener): StateChannelModule;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): StateChannelModule;
  removeAllListeners(eventName: EventFilter | string): StateChannelModule;
  removeListener(eventName: any, listener: Listener): StateChannelModule;

  interface: StateChannelModuleInterface;

  functions: {
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      nonce: BigNumberish
    ): Promise<string>;

    manager(): Promise<string>;

    changeMasterCopy(
      _masterCopy: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    NAME(): Promise<string>;

    setup(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    isExecuted(arg0: Arrayish): Promise<BigNumber>;

    execTransaction(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      nonce: BigNumberish,
      signatures: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    VERSION(): Promise<string>;
  };

  getTransactionHash(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    operation: BigNumberish,
    nonce: BigNumberish
  ): Promise<string>;

  manager(): Promise<string>;

  changeMasterCopy(
    _masterCopy: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  NAME(): Promise<string>;

  setup(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  isExecuted(arg0: Arrayish): Promise<BigNumber>;

  execTransaction(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    operation: BigNumberish,
    nonce: BigNumberish,
    signatures: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  VERSION(): Promise<string>;

  filters: {
    ChangedMasterCopy(masterCopy: null): EventFilter;
  };

  estimate: {
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      nonce: BigNumberish
    ): Promise<BigNumber>;

    manager(): Promise<BigNumber>;

    changeMasterCopy(_masterCopy: string): Promise<BigNumber>;

    NAME(): Promise<BigNumber>;

    setup(): Promise<BigNumber>;

    isExecuted(arg0: Arrayish): Promise<BigNumber>;

    execTransaction(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      operation: BigNumberish,
      nonce: BigNumberish,
      signatures: Arrayish
    ): Promise<BigNumber>;

    VERSION(): Promise<BigNumber>;
  };
}
