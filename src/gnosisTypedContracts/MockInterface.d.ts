/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MockInterfaceInterface extends Interface {
  functions: {
    invocationCount: TypedFunctionDescription<{ encode([]: []): string }>;

    givenCalldataRunOutOfGas: TypedFunctionDescription<{
      encode([call]: [Arrayish]): string;
    }>;

    givenAnyReturnBool: TypedFunctionDescription<{
      encode([response]: [boolean]): string;
    }>;

    givenAnyRunOutOfGas: TypedFunctionDescription<{ encode([]: []): string }>;

    invocationCountForMethod: TypedFunctionDescription<{
      encode([method]: [Arrayish]): string;
    }>;

    invocationCountForCalldata: TypedFunctionDescription<{
      encode([call]: [Arrayish]): string;
    }>;

    givenCalldataReturnBool: TypedFunctionDescription<{
      encode([call, response]: [Arrayish, boolean]): string;
    }>;

    givenCalldataReturn: TypedFunctionDescription<{
      encode([call, response]: [Arrayish, Arrayish]): string;
    }>;

    givenAnyReturnAddress: TypedFunctionDescription<{
      encode([response]: [string]): string;
    }>;

    givenMethodRunOutOfGas: TypedFunctionDescription<{
      encode([method]: [Arrayish]): string;
    }>;

    givenMethodReturnBool: TypedFunctionDescription<{
      encode([method, response]: [Arrayish, boolean]): string;
    }>;

    givenAnyRevertWithMessage: TypedFunctionDescription<{
      encode([message]: [string]): string;
    }>;

    givenMethodRevertWithMessage: TypedFunctionDescription<{
      encode([method, message]: [Arrayish, string]): string;
    }>;

    givenCalldataRevertWithMessage: TypedFunctionDescription<{
      encode([call, message]: [Arrayish, string]): string;
    }>;

    givenMethodRevert: TypedFunctionDescription<{
      encode([method]: [Arrayish]): string;
    }>;

    givenAnyReturnUint: TypedFunctionDescription<{
      encode([response]: [BigNumberish]): string;
    }>;

    givenCalldataReturnAddress: TypedFunctionDescription<{
      encode([call, response]: [Arrayish, string]): string;
    }>;

    givenMethodReturn: TypedFunctionDescription<{
      encode([method, response]: [Arrayish, Arrayish]): string;
    }>;

    givenMethodReturnAddress: TypedFunctionDescription<{
      encode([method, response]: [Arrayish, string]): string;
    }>;

    givenAnyReturn: TypedFunctionDescription<{
      encode([response]: [Arrayish]): string;
    }>;

    givenCalldataReturnUint: TypedFunctionDescription<{
      encode([call, response]: [Arrayish, BigNumberish]): string;
    }>;

    reset: TypedFunctionDescription<{ encode([]: []): string }>;

    givenAnyRevert: TypedFunctionDescription<{ encode([]: []): string }>;

    givenCalldataRevert: TypedFunctionDescription<{
      encode([call]: [Arrayish]): string;
    }>;

    givenMethodReturnUint: TypedFunctionDescription<{
      encode([method, response]: [Arrayish, BigNumberish]): string;
    }>;
  };

  events: {};
}

export class MockInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MockInterface;
  attach(addressOrName: string): MockInterface;
  deployed(): Promise<MockInterface>;

  on(event: EventFilter | string, listener: Listener): MockInterface;
  once(event: EventFilter | string, listener: Listener): MockInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MockInterface;
  removeAllListeners(eventName: EventFilter | string): MockInterface;
  removeListener(eventName: any, listener: Listener): MockInterface;

  interface: MockInterfaceInterface;

  functions: {
    invocationCount(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenCalldataRunOutOfGas(
      call: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenAnyReturnBool(
      response: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenAnyRunOutOfGas(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    invocationCountForMethod(
      method: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    invocationCountForCalldata(
      call: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenCalldataReturnBool(
      call: Arrayish,
      response: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenCalldataReturn(
      call: Arrayish,
      response: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenAnyReturnAddress(
      response: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenMethodRunOutOfGas(
      method: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenMethodReturnBool(
      method: Arrayish,
      response: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenAnyRevertWithMessage(
      message: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenMethodRevertWithMessage(
      method: Arrayish,
      message: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenCalldataRevertWithMessage(
      call: Arrayish,
      message: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenMethodRevert(
      method: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenAnyReturnUint(
      response: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenCalldataReturnAddress(
      call: Arrayish,
      response: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenMethodReturn(
      method: Arrayish,
      response: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenMethodReturnAddress(
      method: Arrayish,
      response: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenAnyReturn(
      response: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenCalldataReturnUint(
      call: Arrayish,
      response: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    reset(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    givenAnyRevert(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenCalldataRevert(
      call: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    givenMethodReturnUint(
      method: Arrayish,
      response: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  invocationCount(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenCalldataRunOutOfGas(
    call: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenAnyReturnBool(
    response: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenAnyRunOutOfGas(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  invocationCountForMethod(
    method: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  invocationCountForCalldata(
    call: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenCalldataReturnBool(
    call: Arrayish,
    response: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenCalldataReturn(
    call: Arrayish,
    response: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenAnyReturnAddress(
    response: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenMethodRunOutOfGas(
    method: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenMethodReturnBool(
    method: Arrayish,
    response: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenAnyRevertWithMessage(
    message: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenMethodRevertWithMessage(
    method: Arrayish,
    message: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenCalldataRevertWithMessage(
    call: Arrayish,
    message: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenMethodRevert(
    method: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenAnyReturnUint(
    response: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenCalldataReturnAddress(
    call: Arrayish,
    response: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenMethodReturn(
    method: Arrayish,
    response: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenMethodReturnAddress(
    method: Arrayish,
    response: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenAnyReturn(
    response: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenCalldataReturnUint(
    call: Arrayish,
    response: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  reset(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  givenAnyRevert(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenCalldataRevert(
    call: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  givenMethodReturnUint(
    method: Arrayish,
    response: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    invocationCount(): Promise<BigNumber>;

    givenCalldataRunOutOfGas(call: Arrayish): Promise<BigNumber>;

    givenAnyReturnBool(response: boolean): Promise<BigNumber>;

    givenAnyRunOutOfGas(): Promise<BigNumber>;

    invocationCountForMethod(method: Arrayish): Promise<BigNumber>;

    invocationCountForCalldata(call: Arrayish): Promise<BigNumber>;

    givenCalldataReturnBool(
      call: Arrayish,
      response: boolean
    ): Promise<BigNumber>;

    givenCalldataReturn(call: Arrayish, response: Arrayish): Promise<BigNumber>;

    givenAnyReturnAddress(response: string): Promise<BigNumber>;

    givenMethodRunOutOfGas(method: Arrayish): Promise<BigNumber>;

    givenMethodReturnBool(
      method: Arrayish,
      response: boolean
    ): Promise<BigNumber>;

    givenAnyRevertWithMessage(message: string): Promise<BigNumber>;

    givenMethodRevertWithMessage(
      method: Arrayish,
      message: string
    ): Promise<BigNumber>;

    givenCalldataRevertWithMessage(
      call: Arrayish,
      message: string
    ): Promise<BigNumber>;

    givenMethodRevert(method: Arrayish): Promise<BigNumber>;

    givenAnyReturnUint(response: BigNumberish): Promise<BigNumber>;

    givenCalldataReturnAddress(
      call: Arrayish,
      response: string
    ): Promise<BigNumber>;

    givenMethodReturn(method: Arrayish, response: Arrayish): Promise<BigNumber>;

    givenMethodReturnAddress(
      method: Arrayish,
      response: string
    ): Promise<BigNumber>;

    givenAnyReturn(response: Arrayish): Promise<BigNumber>;

    givenCalldataReturnUint(
      call: Arrayish,
      response: BigNumberish
    ): Promise<BigNumber>;

    reset(): Promise<BigNumber>;

    givenAnyRevert(): Promise<BigNumber>;

    givenCalldataRevert(call: Arrayish): Promise<BigNumber>;

    givenMethodReturnUint(
      method: Arrayish,
      response: BigNumberish
    ): Promise<BigNumber>;
  };
}
