/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from ".";
import { EtherPaymentFallback } from "./EtherPaymentFallback";

export class EtherPaymentFallbackFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: TransactionOverrides): Promise<EtherPaymentFallback> {
    return super.deploy(overrides) as Promise<EtherPaymentFallback>;
  }
  getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
    return super.getDeployTransaction(overrides);
  }
  attach(address: string): EtherPaymentFallback {
    return super.attach(address) as EtherPaymentFallback;
  }
  connect(signer: Signer): EtherPaymentFallbackFactory {
    return super.connect(signer) as EtherPaymentFallbackFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EtherPaymentFallback {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as EtherPaymentFallback;
  }
}

const _abi = [
  {
    payable: true,
    stateMutability: "payable",
    type: "fallback"
  }
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603280601d6000396000f3fe608060405200fea165627a7a72305820961ed62572417a0692f7a3e87dac5283231e89139aa48f1a3701c69fc1c3f3550029";
