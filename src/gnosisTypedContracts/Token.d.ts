/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface TokenInterface extends Interface {
  functions: {
    transfer: TypedFunctionDescription<{
      encode([_to, value]: [string, BigNumberish]): string;
    }>;
  };

  events: {};
}

export class Token extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Token;
  attach(addressOrName: string): Token;
  deployed(): Promise<Token>;

  on(event: EventFilter | string, listener: Listener): Token;
  once(event: EventFilter | string, listener: Listener): Token;
  addListener(eventName: EventFilter | string, listener: Listener): Token;
  removeAllListeners(eventName: EventFilter | string): Token;
  removeListener(eventName: any, listener: Listener): Token;

  interface: TokenInterface;

  functions: {
    transfer(
      _to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  transfer(
    _to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    transfer(_to: string, value: BigNumberish): Promise<BigNumber>;
  };
}
